{"version":3,"sources":["components/wordhunt/Grid.js","components/wordhunt/GridForm.js","components/wordhunt/ArrowGrid.js","components/wordhunt/AllWords.js","components/wordhunt/WordHuntSolver.js","components/Menu.js","components/Footer.js","pages/WordHunt.js","pages/Landing.js","components/wordbites/Grid.js","components/wordbites/WordBitesSolver.js","pages/WordBites.js","components/anagrams/AnagramsSolver.js","pages/Anagrams.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","size","letters","grid","console","log","Math","round","sqrt","length","i","j","charAt","setGrid","map","row","indexR","Row","key","value","indexC","Col","className","GridForm","currWord","useForm","register","handleSubmit","errors","onSubmit","data","combinedString","pow","currValue","document","getElementsByName","toUpperCase","toLowerCase","onClick","autoTab","e","tabindex","$","target","attr","Number","keyCode","elem","focus","Form","id","Array","from","_","col","placeholder","maxLength","name","ref","required","tabIndex","onKeyUp","type","style","height","letter","Button","variant","lg","defaultValue","nextClick","ArrowGrid","directions","isArray","points","r1","floor","c1","r2","x1","y1","x2","y2","push","xmlns","viewBox","cx","cy","r","stroke","strokeWidth","fill","markerWidth","markerHeight","refX","refY","orient","markerEnd","AllWords","words","xs","sm","md","normal","direction","WordHuntSolver","useState","setLetters","setDirections","setCurrWord","currIdx","setCurrIdx","allDirections","setAllDirections","useEffect","axios","post","then","response","answer","error","handleSolveLetters","Menu","colorScheme","Navbar","collapseOnSelect","expand","fontSize","zIndex","Toggle","aria-controls","Collapse","Nav","width","display","justifyContent","Link","as","to","Footer","textColor","backgroundColor","color","WordHunt","title","Container","bg","Landing","class","href","word","pieces","rows","cols","tempRow","c","indexInWord","forEach","piece","idx","currLetter","vertPieces","has","delete","indexOf","horizPieces","singlePieces","WordBitesSolver","setSinglePieces","setHorizPieces","setVertPieces","loading","setLoading","singlePiecesArr","setSinglePiecesArr","horizPiecesArr","setHorizPiecesArr","vertPiecesArr","setVertPiecesArr","validWords","setValidWords","wordIdx","setWordIdx","Set","Group","Label","column","Control","onChange","tempSingle","trim","split","tempVert","tempHoriz","singleLetterPieces","tempValidWords","disabled","WordBites","AnagramsSolver","solutions","setSolutions","Anagrams","App","path","element","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a79938a9.chunk.js","sourcesContent":["import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport './Grid.css'\n// import Arrow from '@elsdoerfer/react-arrow';\n\nfunction Grid(props) {\n    let letters = props.letters\n    let grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\n    let size\n    setGrid(letters);\n\n    function setGrid(letters) {\n        console.log(\"set grid called \" + letters)\n        if(letters == null) {\n            grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\n            size = 4\n            return;\n        }\n        size = Math.round(Math.sqrt(letters.length))\n        for(let i = 0; i < size; i++) {\n            for(let j = 0; j < size; j++) {\n                grid[i][j] = letters.charAt(i*size+j)\n            } \n        }\n        console.log(\"set grid to values\")\n    }\n\n\n    return (\n        <div>\n            {grid.map((row, indexR) => (\n                <Row key={indexR}>\n                    {row.map((value, indexC) => (\n                        <Col className='p-1' key={indexR * size +indexC}>\n                            <div className='square' >\n                                <h1 className='text-center letter'>{value}</h1>\n                            </div>\n                            \n                        </Col>\n                    ))}\n                </Row>\n            ))}\n        </div>\n    )\n}\n\nexport default Grid;\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport $ from \"jquery\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction GridForm(props) {\n  const ALPHA_START = 65;\n  const ALPHA_END = 90;\n  const currWord = props.currWord;\n  const size = props.size;\n\n  const { register, handleSubmit, errors } = useForm();\n  // const [ letters, setLetters ] = useState(\"\");\n\n  const onSubmit = (data) => {\n    let combinedString = \"\";\n    for (let i = 0; i < Math.pow(size, 2); i++) {\n      let currValue = document.getElementsByName(\"letter\")[i].value;\n      if (currValue.toUpperCase() == currValue.toLowerCase()) {\n        //not a letter\n        return (\n          <h1>\n            You did not enter a character in one of the fields. Refresh the page\n          </h1>\n        );\n      }\n      combinedString += currValue.toUpperCase();\n    }\n    // setLetters(combinedString);\n    props.onClick(combinedString);\n  };\n\n  const onNext = () => {\n    props.nextClick();\n  };\n\n  const autoTab = (e) => {\n    let tabindex = $(e.target).attr(\"tabindex\") || 0;\n\n    tabindex = Number(tabindex);\n    let currValue = document.getElementsByName(\"letter\")[tabindex].value;\n    console.log(currValue);\n    if (\n      e.keyCode >= ALPHA_START &&\n      e.keyCode <= ALPHA_END &&\n      currValue !== \"\"\n    ) {\n      tabindex += 1;\n    }\n    const elem = $(\"[tabindex=\" + tabindex + \"]\");\n    if (elem[0]) {\n      elem.focus();\n    }\n  };\n\n  if (currWord == null)\n    return (\n      <Form\n        id=\"forms\"\n        className=\"py-3 text-center\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <table className=\"table table-bordered\">\n          <tbody>\n            {Array.from({ length: size }).map((_, row) => (\n              <tr key={row}>\n                {Array.from({ length: size }).map((_, col) => (\n                  <td key={row * size + col}>\n                    <input\n                      placeholder={props.letters.charAt(row * size + col)}\n                      maxLength=\"1\"\n                      name=\"letter\"\n                      ref={register({ required: true })}\n                      id={row * size + col}\n                      tabIndex={row * size + col}\n                      onKeyUp={autoTab}\n                      type=\"text\"\n                      style={({ width: 0.15 + \"em\" }, { height: 2.15 + \"em\" })}\n                    />\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {errors.letter && <p>Some values are not filled</p>}\n        <p>To reset all, refresh the page</p>\n        <Button\n          type=\"submit\"\n          tabIndex={Math.pow(size, 2)}\n          variant=\"dark\"\n          size=\"lg\"\n        >\n          Set Grid!\n        </Button>\n      </Form>\n    );\n  else\n    return (\n      <div>\n        <Form\n          id=\"forms\"\n          className=\"py-1 text-center\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <Row>\n            <Col lg=\"9\">\n              <table className=\"table table-bordered\">\n                <tbody>\n                  {Array.from({ length: size }).map((_, row) => (\n                    <tr key={row}>\n                      {Array.from({ length: size }).map((_, col) => (\n                        <td key={row * size + col}>\n                          <input\n                            defaultValue={props.letters.charAt(\n                              row * size + col\n                            )}\n                            maxLength=\"1\"\n                            name=\"letter\"\n                            ref={register({ required: true })}\n                            id={row * size + col}\n                            tabIndex={row * size + col}\n                            onKeyUp={autoTab}\n                            type=\"text\"\n                            style={\n                              ({ width: 0.15 + \"em\" }, { height: 2.15 + \"em\" })\n                            }\n                          />\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </Col>\n            <Col lg=\"3\">\n              {errors.letter && <p>Some values are not filled</p>}\n              <p>To reset all, refresh the page</p>\n              <Button\n                type=\"submit\"\n                tabIndex={Math.pow(size, 2)}\n                variant=\"dark\"\n                size=\"lg\"\n              >\n                Set Grid!\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n\n        <form className=\"text-center\" name=\"next\">\n          <p>current word: </p> <h1> {currWord} </h1>\n          <br />\n          <Button variant=\"dark\" onClick={() => onNext()}>\n            Next Word!\n          </Button>\n          <p>Click once and then use SPACE or ENTER</p>\n        </form>\n      </div>\n    );\n}\n\nexport default GridForm;\n","import React from 'react'\n\nfunction ArrowGrid(props) {\n  let directions = props.directions\n  let size = props.size\n\n  if(Array.isArray(directions) && directions.length == 0){\n    return (\n      <div></div>\n    )\n  }\n\n  let points = []\n  let r1 = Math.floor(directions[0]/size);\n  let c1 = directions[0]%size;\n  for(let i = 1; i < directions.length; i++) {\n    let r2 = Math.floor(directions[i]/size)\n    let c2 = directions[i]%size\n\n    let x1 = (c1)*100 + 50;\n    let y1 = (r1)*100 + 50;\n    let x2 = (c2)*100 + 50;\n    let y2 = (r2)*100 + 50;\n\n    points.push([x1, y1, x2, y2]);\n    console.log(x1, y1, x2, y2)\n\n    r1 = Math.floor(directions[i]/size)\n    c1 = directions[i]%size\n  }\n\n  return (\n    <div>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\" className='mt-2'>\n        <circle cx={points[0][0]} cy={points[0][1]} r=\"15\" stroke=\"black\" strokeWidth=\"3\" fill=\"red\" />\n        <defs>\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \n          refX=\"0\" refY=\"3.5\" orient=\"auto\" >\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#ffcc99\" stroke=\"black\"/>\n          </marker>\n        </defs>\n\n        {points.map((row, indexR) => (\n          <line x1={row[0]} y1={row[1]} x2={row[2]} y2={row[3]} stroke=\"#990000\" \n          strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" key={indexR}/>\n        ))}\n        {/* <line x1=\"50\" y1=\"50\" x2=\"250\" y2=\"50\" stroke=\"#000\" \n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\n        <line x1=\"200\" y1=\"150\" x2=\"250\" y2=\"50\" stroke=\"#000\" \n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" /> */}\n      </svg>\n    </div>\n    \n  )\n}\n\nexport default ArrowGrid","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction AllWords(props) {\n    let words = props.words\n\n    if(Array.isArray(words) && words.length == 0)\n        return(\n            <div></div>\n        )\n    else {\n        return(\n            <div className=\"border border-dark rounded p-3\">\n                <h3>All Words</h3>\n                <Row>\n                    {words.map((row, indexR) => (\n                        <Col key={row} xs=\"6\" sm=\"4\" md=\"3\" lg=\"2\">\n                            {props.normal ? row : row[0]} {props.direction ? `(${row[1]})` : \"\"}\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        )\n    }\n\n}\n\nexport default AllWords;\n","import React, { useState, useEffect } from \"react\";\nimport Grid from \"./Grid\";\nimport GridForm from \"./GridForm\";\nimport ArrowGrid from \"./ArrowGrid\";\nimport AllWords from \"./AllWords\";\nimport axios from \"axios\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction WordHuntSolver() {\n  const [letters, setLetters] = useState(\"\");\n  const [directions, setDirections] = useState([]);\n  const [currWord, setCurrWord] = useState(null);\n  const [currIdx, setCurrIdx] = useState(0);\n  const [size, setSize] = useState(4);\n  const [allDirections, setAllDirections] = useState([]);\n\n  const url = \"https://gamepigeon.pythonanywhere.com\";\n  // const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n//   const url = \"http://127.0.0.1:5000\";\n  // const url = \"http://8408b4828030.ngrok.io\";\n  // handles the solve with the grid\n  function handleSolveLetters(letters) {\n    if (letters != \"\") {\n      setLetters(letters);\n      axios\n        .post(`${url}/wordhunt`, {\n          letters: letters,\n          size: size,\n        })\n        .then(\n          (response) => {\n            setAllDirections(response.data.answer);\n          },\n          (error) => {\n            console.log(error);\n          }\n        );\n      setCurrIdx(0);\n    }\n  }\n\n  useEffect(() => {\n    if (letters != \"\" && allDirections != []) {\n      setDirections(allDirections[currIdx][1]);\n      setCurrWord(allDirections[currIdx][0]);\n      setCurrIdx(currIdx + 1);\n      // document.getElementsByName(\"next\")[0].style.display = 'block';\n    }\n  }, [allDirections]);\n\n  const handleClick = (data) => {\n    // setLetters(data);\n    handleSolveLetters(data);\n  };\n  const handleNext = () => {\n    if (letters != \"\") {\n      setDirections(allDirections[currIdx][1]);\n      setCurrWord(allDirections[currIdx][0]);\n      setCurrIdx(currIdx + 1);\n    }\n  };\n  return (\n      <div>\n        <Row>\n          <Col md=\"6\">\n            <h3 className=\"text-center\">Enter your letters</h3>\n            <GridForm\n              onClick={handleClick}\n              nextClick={handleNext}\n              currWord={currWord}\n              size={size}\n              letters={letters}\n            />\n          </Col>\n\n          <Col md=\"6\">\n            <div className=\"parent px-1\">\n              <Grid letters={letters} />\n              <div className=\"child\">\n                <ArrowGrid directions={directions} size={size} />\n              </div>\n            </div>\n          </Col>\n        </Row>\n        <div className=\"mt-3\">\n          <AllWords words={allDirections} />\n        </div>\n      </div>\n  );\n}\n\nexport default WordHuntSolver;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\"\nimport { Nav } from \"react-bootstrap\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\n\nfunction Menu({colorScheme}) {\n  return (\n      <Navbar collapseOnSelect expand=\"md\" variant={colorScheme} style={{fontSize: 30, zIndex: 5}}>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\" >\n          <Nav style={{ width: '100%', display: 'flex', justifyContent: 'space-evenly'}}>\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/wordhunt\">WordHunt</Nav.Link>\n            <Nav.Link as={Link} to=\"/wordbites\">WordBites</Nav.Link>\n            <Nav.Link as={Link} to=\"/anagrams\">Anagrams</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n  );\n}\n\nexport default Menu;\n","import React from \"react\";\n\n\nfunction Footer({textColor}) {\n  return (\n      <footer className=\"text-center text-xs p-3 fixed-bottom w-full\" style={{backgroundColor: \"transparent\", color: textColor, zIndex: 0}}>\n        &copy; Copyright Steven Yao 2020 - 2022\n      </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport WordHuntSolver from \"../components/wordhunt/WordHuntSolver\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Menu from \"../components/Menu\";\nimport Footer from \"../components/Footer\";\n\nfunction WordHunt() {\n  document.title = \"Visual WordHunt Solver\"\n\n  return (\n    <div className=\"bg-light min-vh-100\" style={{height: '100%'}}>\n      <Menu colorScheme='light'/>\n\n      <Container className=\"p-3 bg-white mt-3\" >\n          <h1 className=\"text-center py-3\">WordHunt Solver!</h1>\n        <WordHuntSolver />\n      </Container>\n      \n      <Footer bg=\"dark\"/>\n    </div>\n  );\n}\n\nexport default WordHunt;\n","import React from \"react\";\nimport ParticlesBg from \"particles-bg\";\n\nimport Menu from \"../components/Menu\";\nimport Footer from \"../components/Footer\";\n\nfunction Landing() {\n  document.title = \"Gamepigeon Solvers\"\n\n  return (\n    <div >\n        <ParticlesBg type=\"circle\" bg={true}/>\n\n        <Menu colorScheme={'dark'}/>\n\n        <div className=\"fixed-top text-light d-flex flex-column align-items-center justify-content-center\" style={{height: '100vh', zIndex: 0}}>\n            <h1 class=\"display-3\">Gamepigeon Solvers</h1>\n            <h5>by <a href=\"https://skyao2002.github.io/\" className=\"text-light\">Steven Yao</a></h5>\n        </div>\n\n        <Footer textColor=\"white\" />\n\n      </div>\n  );\n}\n\nexport default Landing;\n","import React from 'react'\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default function Grid({word, direction, pieces, ...props}) {\n    let rows = direction == 'V' ? word.length : 3;\n    let cols = direction == 'V' ? 3 : word.length;\n\n    let grid = []\n\n    for (let r = 0; r < rows; r++) {\n        let tempRow = []\n        for (let c = 0; c < cols; c++) {\n            tempRow.push(\" \")\n        }\n        grid.push(tempRow)\n    }\n\n    let indexInWord = 0;\n    if (direction == 'H') {\n        pieces.forEach((piece, idx) => {\n            let currLetter = word[indexInWord]\n            if (props.vertPieces.has(piece)) {\n                props.vertPieces.delete(piece)\n                grid[1][indexInWord] = currLetter\n                if (piece.indexOf(currLetter) == 0) {\n                    grid[2][indexInWord] = piece[1]\n                } else {\n                    grid[0][indexInWord] = piece[0]\n                }\n                indexInWord++\n            } else if (props.horizPieces.has(piece)) {\n                props.horizPieces.delete(piece)\n                grid[1][indexInWord] = currLetter\n                grid[1][indexInWord+1] = word[indexInWord+1]\n                indexInWord += 2\n            } else {\n                props.singlePieces.delete(piece)\n                grid[1][indexInWord] = currLetter\n                indexInWord++\n            }\n        })\n    } else {\n        pieces.forEach((piece, idx) => {\n            let currLetter = word[indexInWord]\n            if (props.horizPieces.has(piece)) {\n                props.horizPieces.delete(piece)\n                grid[indexInWord][1] = currLetter\n                if (piece.indexOf(currLetter) == 0) {\n                    grid[indexInWord][2] = piece[1]\n                } else {\n                    grid[indexInWord][0] = piece[0]\n                }\n                indexInWord++\n            } else if (props.vertPieces.has(piece)) {\n                props.vertPieces.delete(piece)\n                grid[indexInWord][1] = currLetter\n                grid[indexInWord+1][1] = word[indexInWord+1]\n                indexInWord += 2\n            } else {\n                props.singlePieces.delete(piece)\n                grid[indexInWord][1] = currLetter\n                indexInWord++\n            }\n        })\n    }\n\n    return (\n        <div>\n            {grid.length != 0 && grid.map((row, indexR) => (\n                <Row>\n                    {row.map((value) => (\n                        <Col xs={direction=='V' || word.length < 5 ? \"2\" : \"\"} className={`p-1 ${value == ' ' ? \"invisible\" : \"\"}`}>\n                            <div className='bitesblock' >\n                                <h1 className='text-center bitesletter'>{value}</h1>\n                            </div>\n                        </Col>\n                    ))}\n                </Row>\n            ))}\n                \n        </div>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { Button } from \"react-bootstrap\";\nimport Grid from \"./Grid\";\nimport AllWords from \"../wordhunt/AllWords\";\n\nfunction WordBitesSolver() {\n  const [singlePieces, setSinglePieces] = useState(\"\");\n  const [horizPieces, setHorizPieces] = useState(\"\");\n  const [vertPieces, setVertPieces] = useState(\"\");\n\n  const [loading, setLoading] = useState(false);\n\n  const [singlePiecesArr, setSinglePiecesArr] = useState([]);\n  const [horizPiecesArr, setHorizPiecesArr] = useState([]);\n  const [vertPiecesArr, setVertPiecesArr] = useState([]);\n\n  const [validWords, setValidWords] = useState([]);\n  const [wordIdx, setWordIdx] = useState(0);\n\n//   const url = \"http://127.0.0.1:5000/\";\n  const url = \"https://gamepigeon.pythonanywhere.com\";\n\n    const onSubmit = () => {\n        setLoading(true)\n        let tempSingle = singlePieces.trim().split(/\\s+/).map(piece => piece.toUpperCase())\n        let tempVert = vertPieces.trim().split(/\\s+/).map(piece => piece.toUpperCase())\n        let tempHoriz = horizPieces.trim().split(/\\s+/).map(piece => piece.toUpperCase())\n        setSinglePiecesArr(tempSingle)\n        setVertPiecesArr(tempVert)\n        setHorizPiecesArr(tempHoriz)\n        if (tempSingle.length != 0 && tempVert.length != 0 && tempHoriz.length != 0) {\n            axios\n            .post(`${url}/wordbites`, {\n                singleLetterPieces: tempSingle,\n                vertPieces: tempVert,\n                horizPieces: tempHoriz,\n            })\n            .then(\n                (response) => {\n                    let tempValidWords = response.data.validWords;\n                    setValidWords(tempValidWords);\n                    // let tempWordsOnly = []\n                    // tempValidWords.forEach((elem) => {\n                    //     tempWordsOnly.push(elem[0])\n                    // })\n                    // setWordsOnly(tempWordsOnly)\n                    setLoading(false)\n                },\n                (error) => {\n                    console.log(error);\n                }\n            );\n        }\n    }\n\n  return (\n      <div>\n        <Row>\n          <Col md=\"6\">\n            <div className=\"parent px-5\">\n                {validWords.length != 0 &&\n                    <div className=\"\">\n                        <h3>{validWords[wordIdx][0]} <span>\n                        <Button variant=\"secondary\" className=\"float-right\" onClick={() => setWordIdx((wordIdx+1) % validWords.length)}>Next</Button>\n                        </span></h3>\n                        \n                        <Grid \n                            word={validWords[wordIdx][0]}\n                            direction={validWords[wordIdx][1]}\n                            pieces={validWords[wordIdx][2]}\n                            vertPieces={new Set(vertPiecesArr)}\n                            horizPieces={new Set(horizPiecesArr)}\n                            singlePieces={new Set(singlePiecesArr)}\n                            />\n                    </div>\n                }\n            </div>\n          </Col>\n\n          <Col md=\"6\">\n                <Form.Group as={Row} className=\"mb-3\">\n                    <Form.Label column sm=\"4\">\n                    Single Letter Pieces\n                    </Form.Label>\n                    <Col sm=\"8\" className=\"mb-3\">\n                        <Form.Control \n                            type=\"text\" \n                            placeholder=\"separate with space (like s g l)\" \n                            defaultValue={singlePieces}\n                            onChange={e => setSinglePieces(e.target.value)}\n                            />\n                    </Col>\n                    <Form.Label column sm=\"4\">\n                    Horizontal Pieces\n                    </Form.Label>\n                    <Col sm=\"8\" className=\"mb-3\">\n                        <Form.Control \n                            type=\"text\" \n                            placeholder=\"separate with space (like ho ri zo)\" \n                            defaultValue={horizPieces}\n                            onChange={e => setHorizPieces(e.target.value)}\n                            />\n                    </Col>\n                    <Form.Label column sm=\"4\">\n                    Vertical Pieces\n                    </Form.Label>\n                    <Col sm=\"8\" className=\"mb-3\">\n                        <Form.Control \n                            type=\"text\" \n                            placeholder=\"separate with space (like ve ti ca)\" \n                            defaultValue={vertPieces}\n                            onChange={e => setVertPieces(e.target.value)}\n                            />\n                    </Col>\n                    <Col className=\"text-center\">\n                        <Button variant=\"primary\" onClick={onSubmit} disabled={loading}>\n                            Submit\n                        </Button>\n                    </Col>\n                </Form.Group>\n          </Col>\n        </Row>\n        <br />\n        <div className=\"mt-3\">\n          <AllWords words={validWords} direction={true}/>\n        </div>\n      </div>\n  );\n}\n\nexport default WordBitesSolver;\n","import React from \"react\";\nimport WordBitesSolver from \"../components/wordbites/WordBitesSolver\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Menu from \"../components/Menu\";\nimport Footer from \"../components/Footer\";\n\nfunction WordBites() {\n  document.title = \"Visual WordBites Solver\"\n  return (\n    <div className=\"bg-light min-vh-100\" style={{height: '100%'}}>\n      <Menu colorScheme='light'/>\n\n      <Container className=\"p-3 bg-white mt-3\" style={{zIndex:3}}>\n          <h1 className=\"text-center py-3\">WordBites Solver!</h1>\n        <WordBitesSolver />\n      </Container>\n      \n      <Footer bg=\"dark\"/>\n    </div>\n  );\n}\n\nexport default WordBites;\n","import React, { useState, useEffect } from \"react\";\nimport AllWords from \"../wordhunt/AllWords\";\nimport axios from \"axios\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction AnagramsSolver() {\n  const [letters, setLetters] = useState(\"\");\n  const [solutions, setSolutions] = useState([]);\n\n\n  const url = \"https://gamepigeon.pythonanywhere.com\";\n  const onSubmit = () => {\n    if (letters != \"\") {\n      axios\n        .post(`${url}/anagrams`, {\n          letters: letters,\n        })\n        .then(\n          (response) => {\n            setSolutions(response.data.validWords);\n          },\n          (error) => {\n            console.log(error);\n          }\n        );\n    }\n  }\n\n  return (\n      <div>\n        <Form.Group as={Row} className=\"mb-3 justify-content-md-center\">\n            <Col xs=\"6\" className=\"mb-3 w-75\">\n                <Form.Control \n                    type=\"text\" \n                    placeholder=\"Enter all letters together (like asdfgh)\" \n                    defaultValue={letters}\n                    onChange={e => setLetters(e.target.value)}\n                    />\n            </Col>\n\n            <Col xs=\"12\" className=\"text-center\">\n                <Button variant=\"primary\" onClick={onSubmit}>\n                    Submit\n                </Button>\n            </Col>\n        </Form.Group>\n        <div className=\"mt-3\">\n          <AllWords words={solutions} normal={true}/>\n        </div>\n      </div>\n  );\n}\n\nexport default AnagramsSolver;\n","import React from \"react\";\nimport AnagramsSolver from \"../components/anagrams/AnagramsSolver\"\nimport Container from \"react-bootstrap/Container\";\nimport Menu from \"../components/Menu\";\nimport Footer from \"../components/Footer\";\n\nfunction Anagrams() {\n  document.title = \"Visual Anagrams Solver\"\n\n  return (\n    <div className=\"bg-light min-vh-100\" style={{height: '100%'}}>\n      <Menu colorScheme='light'/>\n\n      <Container className=\"p-3 bg-white mt-3\" style={{zIndex:3}}>\n          <h1 className=\"text-center py-3\">Anagrams Solver!</h1>\n        <AnagramsSolver />\n      </Container>\n      \n      <Footer bg=\"dark\"/>\n    </div>\n  );\n}\n\nexport default Anagrams;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport WordHunt from \"./pages/WordHunt\";\nimport Landing from \"./pages/Landing\";\nimport WordBites from \"./pages/WordBites\";\nimport Anagrams from \"./pages/Anagrams\";\n\nfunction App() {\n  return (\n    <Router>\n        <Routes>\n            <Route path=\"/wordhunt\" element={<WordHunt />} />\n            <Route path=\"/wordbites\" element={<WordBites />} />\n            <Route path=\"/anagrams\" element={<Anagrams />} />\n            <Route path=\"\" exact element={<Landing />} />\n        </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}